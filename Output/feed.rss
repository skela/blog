<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Alek Slater</title><description>Welcome to Alek Slater's Tech Blog, where coding meets creativity and technology is the ultimate problem-solving tool!
As a fervent software developer, I'm on a journey through the ever-evolving landscape of technology,
exploring the realms of apps, linux, docker, smart homes and 3D printing to tackle and solve interesting problems.</description><link>https://alekslater.com</link><language>en</language><lastBuildDate>Tue, 13 Aug 2024 15:45:04 +0000</lastBuildDate><pubDate>Tue, 13 Aug 2024 15:45:04 +0000</pubDate><ttl>250</ttl><atom:link href="https://alekslater.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://alekslater.com/posts/Apple%20Watch%20in%20HASS</guid><title>Apple Watch in HASS</title><description>Making it possible to detect your presence via your Apple Watch in your Home Assistant Smart Home System.</description><link>https://alekslater.com/posts/Apple%20Watch%20in%20HASS</link><pubDate>Mon, 12 Aug 2024 20:53:00 +0000</pubDate><content:encoded><![CDATA[<p>Each device capable of Bluetooth communication has a Bluetooth MAC address, a unique address that can be used to fingerprint / identify the device. This can of course be very useful in smart home systems if for example you want certain things to happen when you come home or leave the house. But this can also be used for nefarious activities by bad people. Due to the risk of this sort of bad behaviour, Apple made it so the Apple Watch (and iPhones), randomly change their Bluetooth MAC address every 15 minutes or so, making it hard to use for presence detection at home.</p><h1>Prerequisites</h1><p>But with a spare Raspberry Pi, and the <a href="https://gateway.theengs.io/">Theengs BLE MQTT gateway</a>, you will be able to get around this limitation.</p><h1>Setup</h1><ol><li>Open Settings on your Apple Watch / General / About / Bluetooth, note down the Address, should be of the form: XX:XX:XX:XX:XX:XX.</li><li>Open the Keychain Access application on your MacOS.</li><li>Click iCloud in the left sidebar.</li><li>Type in Bluetooth in the search bar in the top right.</li><li>Double click on a few of the GUIDs that you see, looking for an Account field of the form: Public XX:XX:XX:XX:XX:XX.</li><li>When you find one that matches the address from step 1, click show Password, type in your MacOS password, then copy out the XML, and paste it in a text file.</li></ol><p>It should look something like this:</p><pre><code>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
	&lt;key&gt;Remote IRK&lt;/key&gt;
	&lt;data&gt;
	ABCDeasdasdeada7s7z7g==
	&lt;/data&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</code></pre><p>Armed with this Remote IRK and the Bluetooth Mac Address from before, we will be able to set things up on the Raspberry Pi.</p><h1>Installation</h1><p>On your Raspberry Pi, install the python pip package called <code>TheengsGateway</code>.</p><h1>Run</h1><p><code>python3 -m TheengsGateway -H IP_ADDR_MQTT -P PORT_MQTT --identities WATCH_BT_MAC_ADDRESS WATCH_BT_IRK</code></p><ul><li><code>IP_ADDR_MQTT</code>: The IP Address of your MQTT server.</li><li><code>PORT_MQTT</code>: The port number of your MQTT server.</li><li><code>WATCH_BT_MAC_ADDRESS</code>: The Apple Watch Bluetooth Mac Address found in step 1 above.</li><li><code>WATCH_BT_IRK</code>: The Remote IRK Found at the end of step 6.</li></ul><img src="https://alekslater.com/res/apple_watch_in_hass.png" alt="Apple Watch in HASS"/>]]></content:encoded></item><item><guid isPermaLink="true">https://alekslater.com/posts/Custom%20Formatter%20for%20dart</guid><title>Custom Formatter for dart</title><description>Using an alternative formatter for dart.</description><link>https://alekslater.com/posts/Custom%20Formatter%20for%20dart</link><pubDate>Sun, 14 Jan 2024 10:27:00 +0000</pubDate><content:encoded><![CDATA[<p>First thing I always do when setting up any new dart project is to make sure the default formatter baked in to the SDK is disabled. This is because the built in formatter offers nothing in the way of customization, you are in other words stuck with awful unreadable code indented with spaces.</p><p>So what is someone who still thinks code should always be indented with tabs, or prefers the Allman style, to do about that?</p><h3>Meet blink</h3><p>Well, I have been working on my own dart code formatter, <a href="https://github.com/skela/blink">blink</a>, the world's first customizable dart code formatter. Now its still not ready, but we do use it from time to time. My goal is to build a dart code formatter that's customizable via <a href="https://editorconfig.org/">EditorConfig</a> files.</p><h3>Using blink</h3><p>I was never able to figure out how to use my own code formatter for dart back when i was using VSCode, but now that I use <a href="https://neovim.io/">nvim</a> that might be different. Turns out yes, its a lot easier to do this sort of stuff using nvim, infact it took me only 5 minutes to get it up and running, including format on save!</p><pre><code>{
	"stevearc/conform.nvim",
	optional = true,
	opts = {
		formatters_by_ft = {
			["dart"] = { "blink" },
		},
		formatters = {
			blink = {
				command = "/home/skela/code/blink/target/release/blink",
				args = { "$FILENAME" },
				stdin = false,
				cwd = require("conform.util").root_file({ ".editorconfig", "pubspec.yaml" }),
			},
		},
	},
},
</code></pre><h3>EditorConfig</h3><p>I've got this snippet below added to my <code>.editorconfig</code> file. blink looks for an .editorconfig in your code repo and your home directory.</p><pre><code>[*.dart]
indent_style = tab
indent_size = 2
curly_brace_on_next_line = true
prefer_double_quotes = true
trim_trailing_whitespace = true
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://alekslater.com/posts/LED%20Strip%20Bracket</guid><title>LED Strip Bracket</title><description>Attaching my new LED strip.</description><link>https://alekslater.com/posts/LED%20Strip%20Bracket</link><pubDate>Sun, 7 Jan 2024 21:17:00 +0000</pubDate><content:encoded><![CDATA[<p>Needed a way to attach a LED strip I bought from <a href="https://www.aliexpress.com/item/1005003213415540.html">AliExpress</a> to an under-bed storage box. The dimensions of this particular strip were 11.8mm by 6mm. So <a href="https://openscad.org/">OpenSCAD</a> to the rescue. Made a simple cube, cut out a channel and added a screw hole.</p><h3>Making a 3D Model</h3><p>With OpenSCAD you can create 3D models using code, something I personally find much simpler than a graphical design tool. Its also a lot easier to adjust and modify these kinds of models, to fit other kinds of use-cases.</p><pre><code>led_thickness = 11.8;
led_height = 6;

bw = 20; // bracket width
bt = 2; // bracket thickness
lfh = led_height + 0.2; // channel height to fit the led strip
bd = 12; // bracket depth, needs to be bigger than led thickness

$fn=1000;

module bracket()
{
    difference()
    {
        cube([bw,lfh+bt,bd],center=true);
        translate([0,0,bt])
        {
            cube([bw+bt,lfh,bd+bt],center=true);
        }
    }
}

difference()
{
    bracket();
    translate([0,0,-5]) { cylinder(h=bt/2,r=2.4,center=true); }
    translate([0,0,-5]) { cylinder(h=bt*2,r=1,center=true); }
}
</code></pre><h3>Exporting as an STL file</h3><p>Once your happy with your design, you export it as an STL file, and then import that into the slicer / 3D printer software of your choice. Here I'm using <a href="https://ultimaker.com/">UltiMaker Cura</a>.</p><img src="https://alekslater.com/res/led_strip_bracket.png" alt="OpenSCAD Model"/><h3>Sequential Prints</h3><p>Printing a bunch of these would be a tad too tedious, if you had to do it 1 by 1. With UltiMaker Cura, you can set it to print sequentially. In this case, I was able to squeeze in 9 brackets every print, making the most of every square inch of my Ender 5 Pro build plate.</p><img src="https://alekslater.com/res/led_strip_bracket-sequential_print.png" alt="Sequential Print"/><h3>The End Result</h3><p>Quite pleased with that, daughter approves.</p><img src="https://alekslater.com/res/led_strip_bracket-end_result.jpg" alt="End Result"/>]]></content:encoded></item><item><guid isPermaLink="true">https://alekslater.com/posts/Docker%20Log%20Overload</guid><title>Docker Log Overload</title><description>Avoiding your hard disks from filling up with junk due to excessive docker logging.</description><link>https://alekslater.com/posts/Docker%20Log%20Overload</link><pubDate>Wed, 13 Dec 2023 22:50:00 +0000</pubDate><content:encoded><![CDATA[<p>By adding logging parameters to your docker-compose.yml file services, you can avoid your hard drive from filling up.</p><pre><code>version: '3'

# Define a common logging configuration as an anchor
x-common-logging: &amp;common-logging
  logging:
    driver: json-file
    options:
      max-size: "100m" # Set the maximum size of each log file to 10MB
      max-file: "10"   # Limit the number of log files to 5

services:

  hass:
    container_name: hass
    depends_on:
        - mosquitto
        - postgres
    image: homeassistant/home-assistant:2023.10
    restart: always
    network_mode: host
    privileged: true
    environment:
      - TZ=Europe/Oslo
    volumes:
      - ./hass/config:/config
    deploy:
      resources:
        limits:
          memory: 2000M
    &lt;&lt;: *common-logging

  nodered:
    container_name: nodered
    image: nodered/node-red:latest
    environment:
      TZ: Europe/Oslo
    ports:
      - "1880:1880"
    restart: always
    volumes:
      - ./nodered/data:/data
    deploy:
      resources:
        limits:
          memory: 500M
    &lt;&lt;: *common-logging
</code></pre>]]></content:encoded></item></channel></rss>